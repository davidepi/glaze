use std::error::Error;

/// An error generated by the graphic API.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct GraphicError {
    category: ErrorCategory,
    message: String,
}

impl Error for GraphicError {}

impl std::fmt::Display for GraphicError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "({}) {}", self.category, self.message)
    }
}

impl GraphicError {
    pub fn new(category: ErrorCategory, message: impl Into<String>) -> Self {
        Self {
            category,
            message: message.into(),
        }
    }
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum ErrorCategory {
    /// Out of Host memory
    HostMemory,
    /// Out of Device memory
    DeviceMemory,
    /// The requested feature is not supported,
    UnsupportedFeature,
    /// Initialization failed (unsatisfied requirements, etc.)
    InitFailed,
    /// Device or surface lost
    DeviceLost,
    /// Anything else
    Uncategorized,
    /// Some errors that are recoverable and not stricly a failure
    NotError,
}

impl std::fmt::Display for ErrorCategory {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ErrorCategory::HostMemory => write!(f, "Out of Host Memory"),
            ErrorCategory::DeviceMemory => write!(f, "Out of Device Memory"),
            ErrorCategory::UnsupportedFeature => write!(f, "Unsupported feature"),
            ErrorCategory::DeviceLost => write!(f, "Device Lost"),
            ErrorCategory::Uncategorized => write!(f, "Uncategorized"),
            ErrorCategory::InitFailed => write!(f, "Initialization failed"),
            ErrorCategory::NotError => write!(f, "Not an Error"),
        }
    }
}
