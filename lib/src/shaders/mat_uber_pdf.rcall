#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier: require

#include "constants.glsl"
#include "microfacets.glsl"
#include "raytrace_structures.glsl"
#include "raytrace_commons.glsl"

layout(location = 0) callableDataInEXT BsdfPdf bsdf;

layout(std430, set=1, binding=4) readonly buffer materialBuffer {
  RTMaterial materials[];
} MaterialBuffer;

layout(set=1, binding=6) uniform sampler2D textures[];

void main()
{
  vec3 wo = to_shading_space(bsdf.woW, bsdf.shading);
  vec3 wi = to_shading_space(bsdf.wiW, bsdf.shading);
  RTMaterial mat = MaterialBuffer.materials[bsdf.material_index];
  float sampled_roughness = texture(textures[nonuniformEXT(mat.roughness)], bsdf.uv).r;
  float roughness = sampled_roughness*mat.roughness_mul;
  float same_hemi = step(0.0, wo.z*wi.z);
  // specular component pdf
  vec2 a = to_anisotropic(roughness*mat.roughness_mul, mat.anisotropy);
  vec3 wh = normalize(wo+wi);
  float dotwowh = dot(wo,wh);
  float d = step(0.0, wo.z)*ggx_d(wh, a);
  float pdf = ggx_pdf(d, a, wo, wh)/(4.0*dotwowh);
  float specular_pdf = CHECKNAN(pdf);
  // diffuse component pdf
  float diffuse_pdf = CHECKNAN(abs(wi.z) * INV_PI);
  bsdf.pdf = (specular_pdf+diffuse_pdf)*0.5;
}
