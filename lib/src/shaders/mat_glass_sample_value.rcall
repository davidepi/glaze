#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier: require

#include "fresnel.glsl"
#include "constants.glsl"
#include "spectrum.glsl"
#include "shading_space.glsl"
#include "raytrace_structures.glsl"
#include "raytrace_commons.glsl"

layout(location = 0) callableDataInEXT BsdfSampleValue bsdf;

layout(std430, set=1, binding=4) readonly buffer materialBuffer {
  RTMaterial materials[];
} MaterialBuffer;

Spectrum glass_reflective_sample_value(in vec3 wo, out vec3 wi, in float fresnel)
{
  wi = vec3(-wo.x, -wo.y, wo.z);
  float eval = fresnel/abs(wi.z);
  Spectrum reflective_component = SPECTRUM_ONE;
  return mul(reflective_component, eval);
}

Spectrum glass_refractive_sample_value(in vec3 wo, out vec3 wi, in float fresnel, in float etai, in float etat)
{
  wi = refract(wo, vec3(0.0, 0.0, sign(wo.z)), etai/etat);
  float eval = (1.0-fresnel)*(etai*etai)/(etat*etat*abs(wi.z));
  Spectrum refractive_component = SPECTRUM_ONE;
  return mul(refractive_component, eval);
}

void main()
{
  vec3 wo = to_shading_space(bsdf.woW, bsdf.shading);
  RTMaterial mat = MaterialBuffer.materials[bsdf.material_index];
  float costi = wo.z;
  float from_outside = step(0.0, costi);
  float etai = mix(mat.ior_dielectric, DEFAULT_IOR, from_outside);
  float etat = mix(DEFAULT_IOR, mat.ior_dielectric, from_outside);
  costi = mix(abs(costi), costi, from_outside);
  float fresnel = fresnel_dielectric(costi, etai, etat);
  vec3 wi;
  if(bsdf.rand_sample.z < fresnel)
  {
    bsdf.value = glass_reflective_sample_value(wo, wi, fresnel);
    bsdf.pdf = fresnel;
  }
  else
  {
    bsdf.value = glass_refractive_sample_value(wo, wi, fresnel, etai, etat);
    bsdf.pdf = 1.0 - fresnel;
  }
  bsdf.wiW = to_world_space(wi, bsdf.shading);
}
