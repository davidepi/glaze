#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier: require

#include "constants.glsl"
#include "spectrum.glsl"
#include "fresnel.glsl"
#include "microfacets.glsl"
#include "raytrace_structures.glsl"
#include "raytrace_commons.glsl"

layout(location = 0) callableDataInEXT BsdfValue bsdf;

layout(std430, set=1, binding=4) readonly buffer materialBuffer {
  RTMaterial materials[];
} MaterialBuffer;

layout(set=1, binding=6) uniform sampler2D textures[];

void main()
{
  RTMaterial mat = MaterialBuffer.materials[bsdf.material_index];
  bool same_hemisphere = dot(bsdf.geometric_normal, bsdf.wiW)*dot(bsdf.geometric_normal, bsdf.woW) > 0.0;
  vec3 wo = to_shading_space(bsdf.woW, bsdf.shading);
  vec3 wi = to_shading_space(bsdf.wiW, bsdf.shading);
  vec3 wh = normalize(wo+wi);
  float costwo = abs(wo.z);
  float costwi = abs(wi.z);
  // additional degenerate cases
  bool degenerate = costwo==0.0 || costwi==0.0 || wh==vec3(0.0);
  if(same_hemisphere && !degenerate) // can't use a step function due to NaNs propagation
  {
    Spectrum metal_ior = Spectrum(mat.ior0, mat.ior1, mat.ior2, mat.ior3);
    Spectrum metal_fresnel = Spectrum(mat.metal_fresnel0,mat.metal_fresnel1,mat.metal_fresnel2,mat.metal_fresnel3);
    Spectrum F = fresnel_conductor(dot(wi, wh), metal_ior, metal_fresnel);
    float sampled_roughness = texture(textures[nonuniformEXT(mat.roughness)], bsdf.uv).r;
    vec2 a = to_anisotropic(sampled_roughness*mat.roughness_mul, mat.anisotropy);
    float d = ggx_d(wh, a);
    float g = ggx_g(wo, wi, a);
    float term = d*g/(4.0*costwo*costwi);
    float pdf = ggx_pdf(d, a, wo, wh);
    bsdf.value = mul(F, term);
    bsdf.pdf = CHECKNAN(pdf);
  }
  else
  {
    bsdf.pdf = 0.0;
  }
}
