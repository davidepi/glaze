#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier: require

#include "random.glsl"
#include "constants.glsl"
#include "spectrum.glsl"
#include "hit.glsl"
#include "bdpt_utils.glsl"
#include "raytrace_structures.glsl"
#include "raytrace_commons.glsl"

layout(location=0) rayPayloadEXT bool shadow_ray_hit;
layout(location=1) callableDataEXT SampledLight sam;
layout(location=2) callableDataEXT BsdfValue bsdf;

layout(push_constant) uniform readonly pc {
  mat4 camera2world;
  mat4 screen2camera;
} Camera;
layout(set=0, binding=0) uniform readonly frameData {
  RTFrameData data;
} FrameData;
layout(std430, set=0, binding=1) buffer bdpt {
  BDPTPath paths[];
} Bdpt;
layout(set=0, binding=2, rgba32f) uniform image2D accumulate_image;
layout(set=0, binding=3, rgba32f) uniform writeonly image2D result_image;
layout(set=1, binding=0) uniform accelerationStructureEXT scene;
layout(std430, set=1, binding=1) readonly buffer vertexBuffer {
  VertexPacked vertices[];
} VertexBuffer;
layout(std430, set=1, binding=2) readonly buffer indexBuffer {
  Triangle indices[];
} IndexBuffer;
layout(std430, set=1, binding=4) readonly buffer materialBuffer {
  RTMaterial materials[];
} MaterialBuffer;
layout(std430, set=1, binding=5) readonly buffer lightBuffer {
  RTLight lights[];
} LightBuffer;
layout(set=1, binding=6) uniform sampler2D textures[];
layout(set=1, binding=7) readonly buffer derivativeBuffer {
  Derivatives d[];
}DerivativeBuffer;

void main()
{
  if(FrameData.data.lights_no == 0)
  {
    return;
  }
  uint path_id = uint(gl_LaunchIDEXT.y*gl_LaunchSizeEXT.x+gl_LaunchIDEXT.x);
  uint step_no = uint(FrameData.data.center_and_bdpt_step.w);
  uint camera_step = step_no/(BDPT_PATH_LEN+1);
  uint rng = srand(vec3(FrameData.data.seed, gl_LaunchIDEXT.xy));
  SurfaceHit camera_sh;
  vertex_to_surface_hit(Bdpt.paths[path_id].camera[camera_step], camera_sh);
  // bail out early if path missed, avoids tracing shadow ray
  if(camera_sh.miss)
  {
    return;
  }
  HitData hit;
  RTMaterial mat;
  EXPAND_HIT(camera_sh, hit, mat);
  if(mat.is_specular==1)
  {
    return;
  }
  sam.light_index = uint(min(rand(rng)*FrameData.data.lights_no, FrameData.data.lights_no-1));
  float light_sel_pdf = 1.0/FrameData.data.lights_no;
  sam.position = hit.point;
  RTLight light = LightBuffer.lights[sam.light_index];
  executeCallableEXT(light.shader, 1);
  Spectrum L = SPECTRUM_ZERO;
  if(sam.pdf > 0.0)
  {
    if(camera_step == 0)
    {
      bsdf.woW = normalize(Bdpt.paths[path_id].origin_camera.xyz - hit.point);
    }
    else
    {
      vec3 prev_hit;
      EXPAND_HIT_POINT_ONLY(Bdpt.paths[path_id].camera[camera_step-1], prev_hit)
      bsdf.woW = normalize(prev_hit - hit.point);
    }
    bsdf.wiW = sam.wiW;
    bsdf.geometric_normal = hit.geometric_normal;
    bsdf.uv = hit.uv;
    bsdf.shading = new_shading_space(hit.dpdu, hit.shading_normal);
    bsdf.rand_sample = rand(rng);
    bsdf.material_index = camera_sh.ids.y;
    executeCallableEXT(mat.bsdf_index, 2);
    if(bsdf.pdf!=0.0)
    {
      // trace shadow ray
      shadow_ray_hit = true;
      traceRayEXT(scene, gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT,
          0xFF, 0, 0, 1, hit.point, 0.001, sam.wiW, sam.distance-1E-3, 0);
      float weight=float(!shadow_ray_hit);
      weight*=abs(dot(bsdf.wiW, hit.shading_normal))/sam.pdf;
      weight*=light_sel_pdf;
      Spectrum power = Spectrum(
          Bdpt.paths[path_id].camera[camera_step].color0,
          Bdpt.paths[path_id].camera[camera_step].color1,
          Bdpt.paths[path_id].camera[camera_step].color2,
          Bdpt.paths[path_id].camera[camera_step].color3);
      L = mul(power, mul(sam.emission, bsdf.value));
      L = mul(L, weight);
      vec4 cumulative_val = imageLoad(accumulate_image, ivec2(gl_LaunchIDEXT.xy));
      cumulative_val.xyz += xyz(L);
      cumulative_val.w += 1.0;
      vec3 rgb = rgb(vec3(cumulative_val.xyz*FrameData.data.exposure/cumulative_val.w));
      imageStore(accumulate_image, ivec2(gl_LaunchIDEXT.xy), cumulative_val);
      imageStore(result_image, ivec2(gl_LaunchIDEXT.xy), vec4(rgb, 1.0));
    }
  }
}
