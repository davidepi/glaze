#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier: require

#include "hit.glsl"
#include "raytrace_structures.glsl"
#include "raytrace_commons.glsl"

hitAttributeEXT vec2 attrib;

layout(std430, set=1, binding=1) readonly buffer vertexBuffer {
  VertexPacked vertices[];
} VertexBuffer;

layout(std430, set=1, binding=2) readonly buffer indexBuffer {
  Triangle indices[];
} IndexBuffer;

layout(std430, set=1, binding=3) readonly buffer instanceBuffer {
  RTInstance instances[];
} InstanceBuffer;

layout(std430, set=1, binding=4) readonly buffer materialBuffer {
  RTMaterial materials[];
} MaterialBuffer;

layout(set=1, binding=6) uniform sampler2D textures[];

void main()
{
  const vec3 barycentric = vec3(1.0 - attrib.x - attrib.y, attrib.x, attrib.y);
  RTInstance instance = InstanceBuffer.instances[gl_InstanceCustomIndexEXT];
  Triangle tris = IndexBuffer.indices[instance.index_offset/3+gl_PrimitiveID];
  Vertex v0 = from_packed(VertexBuffer.vertices[tris.x]);
  Vertex v1 = from_packed(VertexBuffer.vertices[tris.y]);
  Vertex v2 = from_packed(VertexBuffer.vertices[tris.z]);
  vec2 uv = v0.tcoord * barycentric.x + v1.tcoord * barycentric.y + v2.tcoord * barycentric.z;
  RTMaterial mat = MaterialBuffer.materials[instance.material_id];
  float alpha = texture(textures[nonuniformEXT(mat.opacity)], uv).r;
  if (alpha < 0.5)
  {
    ignoreIntersectionEXT;
  }
}
