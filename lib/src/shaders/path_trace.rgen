#version 460
#extension GL_EXT_ray_tracing : require

#include "raytrace_commons.glsl"
#include "random.glsl"

layout(location=0) rayPayloadEXT HitPoint hit;
layout(location=1) rayPayloadEXT bool shadow_ray_hit;
layout(location=2) callableDataEXT SampledLight sam;
layout(location=3) callableDataEXT BsdfValue bsdfval;
layout(location=4) callableDataEXT BsdfSampleValue bsdfsampleval;
layout(location=5) callableDataEXT BsdfPdf bsdfpdf;

layout(push_constant) uniform readonly pc {
  mat4 camera2world;
  mat4 screen2camera;
} Camera;
layout(set=0, binding=0) uniform readonly frameData {
  uint seed;
  uint lights_no;
  vec2 pixel_offset;
  float scene_radius;
  bool new_frame;
}FrameData;
layout(set=0, binding=1, rgba32f) uniform image2D accumulate_image;
layout(set=0, binding=2, rgba32f) uniform writeonly image2D result_image;
layout(set=1, binding=0) uniform accelerationStructureEXT scene;
layout(std430, set=1, binding=4) readonly buffer materialBuffer {
  RTMaterial materials[];
} MaterialBuffer;
layout(std430, set=1, binding=5) readonly buffer lightBuffer {
  RTLight lights[];
} LightBuffer;

vec3 ray_origin()
{
  // technically this could be just the camera position...
  vec4 origin_screen_space = vec4(0.0, 0.0, 0.0, 1.0);
  vec4 origin = Camera.camera2world * origin_screen_space;
  return origin.xyz;
}

vec3 ray_dir(vec2 ndc)
{
  // take a pixel in screen space (-1.0, 1.0) and calculates the ray in world space
  // by applying the inverse of the transformation matrices usually used in raster rendering

  // note the 1.0 in the Z component. In my other renderer I used 0.0 and that was handled by the
  // raster2screen transformation matrix. Here I don't use such matrix so I need to put the
  // direction in screen space slightly in front of the ray origin (which is on 0.0)
  vec3 target = (Camera.screen2camera*vec4(ndc, 1.0, 1.0)).xyz;
  vec4 direction = normalize(Camera.camera2world * vec4(normalize(target), 0.0));
 return direction.xyz;
}

Spectrum direct_light(inout uint rng, in vec3 direction, in ShadingSpace mat)
{
  Spectrum L = Spectrum(vec4(0), vec4(0), vec4(0), vec4(0));
  vec3 woW = -direction;
  // choose a random light to sample
  sam.light_index = uint(min(rand(rng)*FrameData.lights_no, FrameData.lights_no-1));
  sam.position = hit.point;
  RTLight light = LightBuffer.lights[sam.light_index];
  RTMaterial material = MaterialBuffer.materials[hit.material_index];
  executeCallableEXT(light.shader, 2);
  if(sam.pdf > 0.0)
  {
    bsdfval.woW = woW;
    bsdfval.wiW = sam.wiW;
    bsdfval.normal = hit.normal;
    bsdfval.uv = hit.uv;
    bsdfval.shading = mat;
    bsdfval.material_index = hit.material_index;
    executeCallableEXT(material.bsdf_index, 3);
    if (!is_black(bsdfval.value))
    {
      // trace shadow ray
      shadow_ray_hit = true;
      traceRayEXT(scene,
          gl_RayFlagsOpaqueEXT |
          gl_RayFlagsTerminateOnFirstHitEXT |
          gl_RayFlagsSkipClosestHitShaderEXT,
          0xFF,
          0,
          0,
          1,
          hit.point,
          0.001,
          sam.wiW,
          sam.distance-1E-3,
          1);
      if (!shadow_ray_hit)
      {
        bsdfpdf.woW = bsdfval.woW;
        bsdfpdf.wiW = bsdfval.wiW;
        bsdfpdf.shading = mat;
        executeCallableEXT(material.bsdf_index+2, 5);
        if(bsdfpdf.pdf > 0)
        {
          float adot = abs(dot(bsdfval.wiW, hit.normal))/sam.pdf;
          L = mul(mul(bsdfval.value, sam.emission), adot);
        }
      }
    }
  }
  return L;
}

void main()
{
  if (FrameData.lights_no == 0)
  {
    // not even worth dealing with the accumulation
    imageStore(result_image, ivec2(gl_LaunchIDEXT.xy), vec4(0.0, 0.0, 0.0, 1.0));
    return;
  }
  uint rng = srand(vec3(FrameData.seed, gl_LaunchIDEXT.xy));
  const vec2 pixel = gl_LaunchIDEXT.xy + FrameData.pixel_offset;
  const vec2 uv = pixel / gl_LaunchSizeEXT.xy;
  const vec2 ndc = vec2(-1.0)+2.0*uv;
  vec3 origin = ray_origin();
  vec3 direction = ray_dir(ndc);
  vec4 cumulative_val;
  if(FrameData.new_frame)
  {
    cumulative_val = vec4(0.0);
  }
  else
  {
    cumulative_val = imageLoad(accumulate_image, ivec2(gl_LaunchIDEXT.xy));
  }

  traceRayEXT(scene,
             gl_RayFlagsOpaqueEXT,
             0xFF,
             0,
             0,
             0,
             origin,
             0.0001,
             direction,
             1.0/0.0,
             0);

  // add result
  if (!hit.miss)
  {
    ShadingSpace matrix = new_shading_space(hit.dpdu, hit.normal);
    Spectrum L = direct_light(rng, direction, matrix);
    cumulative_val.xyz += xyz(L);
  }
  else
  {
    cumulative_val.xyz += vec3(0);
  }
  cumulative_val.w += 1.0; // this is the number of samples
  imageStore(accumulate_image, ivec2(gl_LaunchIDEXT.xy), cumulative_val);
  vec3 rgb = rgb(cumulative_val.xyz/cumulative_val.w);
  imageStore(result_image, ivec2(gl_LaunchIDEXT.xy), vec4(rgb, 1.0));
}
