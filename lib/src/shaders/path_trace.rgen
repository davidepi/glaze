#version 460
#extension GL_EXT_ray_tracing : require

#include "random.glsl"
#include "constants.glsl"
#include "spectrum.glsl"
#include "raytrace_structures.glsl"
#include "raytrace_commons.glsl"

layout(location=0) rayPayloadEXT HitData hit;
layout(location=1) rayPayloadEXT bool shadow_ray_hit;
layout(location=2) callableDataEXT SampledLight sam;
layout(location=3) callableDataEXT BsdfValue bsdfval;
layout(location=4) callableDataEXT BsdfSampleValue bsdfsampleval;

layout(push_constant) uniform readonly pc {
  mat4 camera2world;
  mat4 screen2camera;
} Camera;
layout(set=0, binding=0) uniform readonly frameData {
  RTFrameData data;
} FrameData;
layout(set=0, binding=1) buffer ptData {
  PTLastVertex last[];
} PTData;
layout(set=0, binding=2, rgba32f) uniform image2D accumulate_image;
layout(set=0, binding=3, rgba32f) uniform writeonly image2D result_image;
layout(set=1, binding=0) uniform accelerationStructureEXT scene;
layout(std430, set=1, binding=4) readonly buffer materialBuffer {
  RTMaterial materials[];
} MaterialBuffer;
layout(std430, set=1, binding=5) readonly buffer lightBuffer {
  RTLight lights[];
} LightBuffer;

vec3 ray_origin()
{
  // technically this could be just the camera position...
  vec4 origin_screen_space = vec4(0.0, 0.0, 0.0, 1.0);
  vec4 origin = Camera.camera2world * origin_screen_space;
  return origin.xyz;
}

vec3 ray_dir(vec2 ndc)
{
  // take a pixel in screen space (-1.0, 1.0) and calculates the ray in world space
  // by applying the inverse of the transformation matrices usually used in raster rendering

  // note the 1.0 in the Z component. In my other renderer I used 0.0 and that was handled by the
  // raster2screen transformation matrix. Here I don't use such matrix so I need to put the
  // direction in screen space slightly in front of the ray origin (which is on 0.0)
  vec3 target = (Camera.screen2camera*vec4(ndc, 1.0, 1.0)).xyz;
  vec4 direction = normalize(Camera.camera2world * vec4(normalize(target), 0.0));
  return direction.xyz;
}

float direct_light(inout uint rng, in vec3 woW, in ShadingSpace mat, in RTMaterial material, out Spectrum radiance)
{
  float valid_path = 0.0;
  radiance = SPECTRUM_ZERO;
  // choose a random light to sample
  sam.light_index = uint(min(rand(rng)*FrameData.data.lights_no, FrameData.data.lights_no-1));
  sam.position = hit.point;
  sam.rand_sample = rand3(rng);
  RTLight light = LightBuffer.lights[sam.light_index];
  executeCallableEXT(light.shader, 2);
  if(sam.pdf > 0.0)
  {
    bsdfval.woW = woW;
    bsdfval.wiW = sam.wiW;
    bsdfval.geometric_normal = hit.geometric_normal;
    bsdfval.uv = hit.uv;
    bsdfval.shading = mat;
    bsdfval.rand_sample = rand(rng);
    bsdfval.material_id = hit.material_id;
    executeCallableEXT(material.bsdf_index, 3);
    if(bsdfval.pdf > 0.0)
    {
      // trace shadow ray
      shadow_ray_hit = true;
      traceRayEXT(scene, gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT,
          0xFF, 0, 0, 1, hit.point, 0.001, sam.wiW, sam.distance-1E-3, 1);
      float weight = float(!shadow_ray_hit);
      weight *= abs(dot(bsdfval.wiW, hit.shading_normal))/sam.pdf;
      weight *= float(FrameData.data.lights_no);
      radiance = mul(mul(bsdfval.value, sam.emission), weight);
      valid_path = 1.0;
    }
  }
  return valid_path;
}

void update_result(in Spectrum radiance)
{
  vec4 cumulative_val = imageLoad(accumulate_image, ivec2(gl_LaunchIDEXT.xy));
  cumulative_val.xyz += rgb(radiance);
  cumulative_val.w += 1.0;
  vec3 rgb = vec3(cumulative_val.xyz*FrameData.data.exposure/cumulative_val.w);
  imageStore(accumulate_image, ivec2(gl_LaunchIDEXT.xy), cumulative_val);
  imageStore(result_image, ivec2(gl_LaunchIDEXT.xy), vec4(rgb, 1.0));
}

void main()
{
  if(FrameData.data.lights_no == 0)
  {
    // prevents out of bounds access
    return;
  }
  uint rng = srand(vec3(FrameData.data.seed, gl_LaunchIDEXT.xy));
  uint path_id = uint(gl_LaunchIDEXT.y*gl_LaunchSizeEXT.x+gl_LaunchIDEXT.x);
  const vec2 pixel = gl_LaunchIDEXT.xy + FrameData.data.pixel_offset;
  const vec2 uv = pixel / gl_LaunchSizeEXT.xy;
  const vec2 ndc = vec2(-1.0)+2.0*uv;
  Spectrum importance;
  vec3 origin;
  vec3 direction;
  // if integrator is "direct light", generates a new path every time,
  // otherwise only when bounces is zero (hit.w == 0)
#ifndef DIRECT_ONLY
  if(PTData.last[path_id].hit.w == 0)
  {
#endif
    origin = ray_origin();
    direction = ray_dir(ndc);
    importance = SPECTRUM_ONE;
#ifndef DIRECT_ONLY
  }
  else
  {
    origin = PTData.last[path_id].hit.xyz;
    direction = PTData.last[path_id].wi.xyz;
    importance = PTData.last[path_id].importance;
  }
#endif
  traceRayEXT(scene, 0, 0xFF, 0, 0, 0, origin, 0.0001, direction, INFINITY, 0);
  if(isinf(hit.distance))
  {
    PTData.last[path_id].hit.w = 0.0; // mark the path as invalid
    return;
  }
  RTMaterial material = MaterialBuffer.materials[hit.material_id];
  vec3 woW = -direction;
  ShadingSpace matrix = new_shading_space(hit.dpdu, hit.shading_normal);
  float valid_radiance = 0.0;
  if(material.is_specular==0)
  {
    Spectrum radiance;
    valid_radiance = direct_light(rng, woW, matrix, material, radiance);
    if(valid_radiance==1.0)
    {
      radiance = mul(radiance, importance);
      update_result(radiance);
    }
    PTData.last[path_id].wi.w = 0.0; // mark non-specularity of the bounce
  }
  else
  {
    PTData.last[path_id].wi.w = 1.0; // mark specularity of the bounce
  }
  // recursive bounce, no need to calculate this with "direct light" integrator
#ifndef DIRECT_ONLY
  bsdfsampleval.uv = hit.uv;
  bsdfsampleval.woW = woW;
  bsdfsampleval.geometric_normal = hit.geometric_normal;
  bsdfsampleval.rand_sample = rand3(rng);
  bsdfsampleval.shading = matrix;
  bsdfsampleval.material_id = hit.material_id;
  executeCallableEXT(material.bsdf_index+1, 4);
  if(bsdfsampleval.pdf == 0.0)
  {
    PTData.last[path_id].hit.w = 0.0; // mark the path as invalid
    return;
  }
  float weight = abs(dot(bsdfsampleval.wiW, hit.shading_normal));
  weight /= bsdfsampleval.pdf;
  PTData.last[path_id].importance = mul(importance, mul(bsdfsampleval.value, weight));
  PTData.last[path_id].hit.xyz = hit.point;
  PTData.last[path_id].wi.xyz = bsdfsampleval.wiW;
  // update the bounce count
  if(PTData.last[path_id].hit.w < PT_STEPS)
  {
    PTData.last[path_id].hit.w += 1.0;
  }
  else
  {
    PTData.last[path_id].hit.w = 0.0;
  }
#endif
}
