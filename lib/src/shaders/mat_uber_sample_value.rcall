#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier: require

#include "constants.glsl"
#include "spectrum.glsl"
#include "shading_space.glsl"
#include "fresnel.glsl"
#include "microfacets.glsl"
#include "raytrace_structures.glsl"
#include "raytrace_commons.glsl"

layout(location = 0) callableDataInEXT BsdfSampleValue bsdf;

layout(std430, set=1, binding=4) readonly buffer materialBuffer {
  RTMaterial materials[];
} MaterialBuffer;

layout(set=1, binding=6) uniform sampler2D textures[];

void main()
{
  RTMaterial mat = MaterialBuffer.materials[bsdf.material_index];
  vec3 wo = to_shading_space(bsdf.woW, bsdf.shading);
  float sampled_roughness = texture(textures[nonuniformEXT(mat.roughness)], bsdf.uv).r;
  float roughness = sampled_roughness*mat.roughness_mul;
  vec3 wi;
  if(bsdf.rand_sample.z < 0.5)
  {
    // sample specular component
    vec2 a = to_anisotropic(roughness*mat.roughness_mul, mat.anisotropy);
    vec3 wh = normalize(ggx_sample_wh(wo, bsdf.rand_sample.xy, a));
    float sampled_metalness = texture(textures[nonuniformEXT(mat.metalness)], bsdf.uv).r;
    float metalness = sampled_metalness*mat.metalness_mul;
    float from_outside = step(0.0, wo.z);
    float etai = mix(mat.ior_dielectric, DEFAULT_IOR, from_outside);
    float etat = mix(DEFAULT_IOR, mat.ior_dielectric, from_outside);
    float eta = etai/etat;
    wi = -normalize(reflect(wo, wh));
    float dotwowh = dot(wo,wh);
    float dotwiwh = dot(wi,wh);
    float costi = dot(wi, sign(dot(wh,vec3(0,0,1)))*wh);
    Spectrum fd = spectrum_uniform(fresnel_dielectric(costi, etai, etat));
    Spectrum fc = fresnel_conductor(costi, mat.metal_ior, mat.metal_fresnel);
    Spectrum f = mix(fd, fc, metalness);
    float costwo = abs(wo.z);
    float costwi = abs(wi.z);
    float d = step(0.0, wo.z)*ggx_d(wh, a);
    float g = step(0.0, dotwowh)*step(0.0, dotwiwh)*ggx_g(wo, wi, a);
    float pdf = ggx_pdf(d, a, wo, wh)/(4.0*dotwowh);
    float term_reflective = d*g/(4.0*costwo*costwi);
    bsdf.value = mul(f, term_reflective);
    bsdf.pdf = CHECKNAN(0.5*pdf);
  }
  else
  {
    // sample diffuse component
    float t = TWO_PI * bsdf.rand_sample.x;
    float r = sqrt(bsdf.rand_sample.y);
    wi.x = r * cos(t);
    wi.y = r * sin(t);
    wi.z = sqrt(max(0.0, 1.0 - wi.x * wi.x - wi.y * wi.y));
    wi.z *= sign(wo.z);
    vec3 sampled_texel = texture(textures[nonuniformEXT(mat.diffuse)], bsdf.uv).rgb;
    vec3 diffuse_mul = mat.diffuse_mul.xyz;
    // oren nayar value (with roughness == 0.0 is the same as lambert)
    float sigma = roughness*0.5; // remap ggx roughness to oren nayar roughness https://www.gdcvault.com/play/1024478/PBR-Diffuse-Lighting-for-GGX
    float sigma2 = sigma*sigma;
    float A = 1.0 - sigma2/(2.0*(sigma2+0.33));
    float B = 0.45*sigma2/(sigma2+0.09);
    float sinto = sqrt(max(0.0, 1.0-wo.z*wo.z));
    float sinti = sqrt(max(0.0, 1.0-wi.z*wi.z));
    float sinpi = wi.y/sinti;
    float cospi = wi.x/sinti;
    float sinpo = wo.y/sinto;
    float cospo = wo.x/sinto;
    float maxcos = max(0.0, cospi*cospo+sinpi*sinpo);
    float dotwi_g_dotwo = step(abs(wo.z), abs(wi.z));
    float sinalpha = mix(sinto, sinti, dotwi_g_dotwo);
    float tanbeta = mix(sinti/abs(wi.z),sinto/abs(wo.z), dotwi_g_dotwo);
    float term = INV_PI*(A+B*maxcos*sinalpha*tanbeta);
    bsdf.value = from_surface_color(sampled_texel*diffuse_mul*term);
    bsdf.pdf = 0.5 * abs(wi.z) * INV_PI;
  }
  bsdf.wiW = normalize(to_world_space(wi, bsdf.shading));
}
