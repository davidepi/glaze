#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier: require

#include "constants.glsl"
#include "spectrum.glsl"
#include "raytrace_commons.glsl"

layout(location = 0) callableDataInEXT BsdfValue bsdf;

layout(std430, set=1, binding=4) readonly buffer materialBuffer {
  RTMaterial materials[];
} MaterialBuffer;

layout(set=1, binding=6) uniform sampler2D textures[];

Spectrum lambert_value()
{
  return mul(SPECTRUM_ONE, INV_PI);
}

void main()
{
  if (dot(bsdf.geometric_normal, bsdf.wiW)*dot(bsdf.geometric_normal, bsdf.woW) > 0)
  {
    RTMaterial mat = MaterialBuffer.materials[bsdf.material_index];
    Spectrum value = lambert_value();
    vec3 sampled_texel = texture(textures[nonuniformEXT(mat.diffuse)], bsdf.uv).rgb;
    Spectrum sampled_spectrum = from_surface_color(sampled_texel);
    bsdf.value = mul(value, sampled_spectrum);
  }
  else
  {
    bsdf.value = SPECTRUM_ZERO;
  }
}
